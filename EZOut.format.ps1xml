<?xml version="1.0" encoding="utf-16"?>
<Configuration>
  <Controls>
    <Control>
      <Name>System.IO.FileInfo/System.IO.DirectoryInfo.TreeNode</Name>
      <CustomControl>
        <CustomEntries>
          <CustomEntry>
            <CustomItem>
              <ExpressionBinding>
                <ScriptBlock>$Branch,$trunk = '├──', '    '
if ($script:treeDepth) {
    [Environment]::Newline + ($trunk * $script:TreeDepth)+ $Branch
} else {
    $Branch
}
$script:TreeDepth++;</ScriptBlock>
              </ExpressionBinding>
              <ExpressionBinding>
                <PropertyName>Name</PropertyName>
              </ExpressionBinding>
              <ExpressionBinding>
                <ItemSelectionCondition>
                  <ScriptBlock>
            if (-not $_.EnumerateFiles) { return $false } 
            foreach ($f in $_.EnumerateFiles()) {$f;break}
        </ScriptBlock>
                </ItemSelectionCondition>
                <ScriptBlock>
            $_.EnumerateFiles()
        </ScriptBlock>
                <EnumerateCollection />
                <CustomControlName>System.IO.FileInfo/System.IO.DirectoryInfo.TreeNode</CustomControlName>
              </ExpressionBinding>
              <ExpressionBinding>
                <ItemSelectionCondition>
                  <ScriptBlock>
            if (-not $_.EnumerateDirectories) { return $false }
            foreach ($f in $_.EnumerateDirectories()) {$f;break}
        </ScriptBlock>
                </ItemSelectionCondition>
                <ScriptBlock>
            foreach ($d in $_.EnumerateDirectories()) {
                if ($d.Attributes -band 'Hidden') { continue } 
                $d
            }
        </ScriptBlock>
                <EnumerateCollection />
                <CustomControlName>System.IO.FileInfo/System.IO.DirectoryInfo.TreeNode</CustomControlName>
              </ExpressionBinding>
              <ExpressionBinding>
                <ItemSelectionCondition>
                  <ScriptBlock>$script:TreeDepth--;</ScriptBlock>
                </ItemSelectionCondition>
                <ScriptBlock>$null</ScriptBlock>
              </ExpressionBinding>
            </CustomItem>
          </CustomEntry>
        </CustomEntries>
      </CustomControl>
    </Control>
  </Controls>
  <ViewDefinitions>
    <View>
      <Name>System.IO.FileInfo/System.IO.DirectoryInfo</Name>
      <ViewSelectedBy>
        <TypeName>System.IO.FileInfo</TypeName>
        <TypeName>System.IO.DirectoryInfo</TypeName>
      </ViewSelectedBy>
      <CustomControl>
        <CustomEntries>
          <CustomEntry>
            <CustomItem>
              <ExpressionBinding>
                <ItemSelectionCondition>
                  <ScriptBlock>$script:TreeDepth = 0;$true</ScriptBlock>
                </ItemSelectionCondition>
                <ScriptBlock>$_</ScriptBlock>
                <EnumerateCollection />
                <CustomControlName>System.IO.FileInfo/System.IO.DirectoryInfo.TreeNode</CustomControlName>
              </ExpressionBinding>
              <ExpressionBinding>
                <ItemSelectionCondition>
                  <ScriptBlock>$executionContext.SessionState.PSVariable.Remove('script:TreeDepth');$false</ScriptBlock>
                </ItemSelectionCondition>
                <ScriptBlock>$null</ScriptBlock>
              </ExpressionBinding>
            </CustomItem>
          </CustomEntry>
        </CustomEntries>
      </CustomControl>
    </View>
    <View>
      <Name>System.Management.Automation.PSModuleInfo</Name>
      <ViewSelectedBy>
        <TypeName>System.Management.Automation.PSModuleInfo</TypeName>
      </ViewSelectedBy>
      <TableControl>
        <TableHeaders>
          <TableColumnHeader>
          </TableColumnHeader>
          <TableColumnHeader>
          </TableColumnHeader>
          <TableColumnHeader>
          </TableColumnHeader>
        </TableHeaders>
        <TableRowEntries>
          <TableRowEntry>
            <TableColumnItems>
              <TableColumnItem>
                <PropertyName>Name</PropertyName>
              </TableColumnItem>
              <TableColumnItem>
                <PropertyName>Version</PropertyName>
              </TableColumnItem>
              <TableColumnItem>
                <PropertyName>ExportedCommands</PropertyName>
              </TableColumnItem>
            </TableColumnItems>
          </TableRowEntry>
        </TableRowEntries>
      </TableControl>
    </View>
    <View>
      <Name>System.Management.Automation.PSModuleInfoEZOut.RichModuleInfo</Name>
      <ViewSelectedBy>
        <TypeName>System.Management.Automation.PSModuleInfo</TypeName>
        <TypeName>EZOut.RichModuleInfo</TypeName>
      </ViewSelectedBy>
      <CustomControl>
        <CustomEntries>
          <CustomEntry>
            <CustomItem>
              <ExpressionBinding>
                <ScriptBlock>
        $module = $_
        @(
            $moduleNameVer = $module.Name + $(
                if ($module.Version) {
                    " [$($module.Version)]"
                }
            )
            $moduleNameVer
            '=' * $moduleNameVer.Length
            if ($module.Description) {
                $module.Description
                '-' * $moduleNameVer.Length
            }
            
            :findAboutText foreach ($culture in "$(Get-Culture)", 'en-us'| Select-Object -Unique) {
                $aboutTextFile = $module | 
                    Split-Path | 
                    Join-Path -ChildPath $culture | 
                    Join-Path -ChildPath "About_$module.help.txt"
                if (Test-Path $aboutTextFile) {
                    [IO.File]::ReadAllText("$aboutTextFile")
                    break
                } else {
                    Write-Verbose "No help.txt file found at $aboutTextFile"
                }
            }

            $commandSection = if ($module.ExportedCommands.Count) {

                $byVerb = $module.ExportedCommands.Values | 
                    Where-Object { $_.Verb } |
                    Group-Object Verb | 
                    Sort-Object Name

                $maxVerbLength = $byVerb | 
                    Select-Object -ExpandProperty Name | 
                    Measure-Object -Property Length -Maximum | 
                    Select-Object -ExpandProperty Maximum

                $maxNounLength = $module.ExportedCommands.Values |
                    Select-Object -ExpandProperty Noun |
                    Measure-Object -Property Length -Maximum |
                    Select-Object -ExpandProperty Maximum

                "|$(' ' * [Math]::Max($maxVerbLength - 4, 0))Verb|Noun$(' ' * [Math]::Max($maxNounLength - 4 + 1, 0))|"
                "|$('-' * [Math]::Max($maxVerbLength - 1, 0)):|:$('-' * [Math]::Max($maxNounLength, 0))|"
                
                foreach ($_ in $byVerb) {
                    $v = "$($_.Name)"
                   
                    '|' + 
                        ' ' * ($maxVerbLength - $v.Length) + $v + '|' + 
                        $(if ($_.Group.Count -eq 1) {
                            $t = '-' + $_.Group[0].Noun
                            $t + ' ' * ([Math]::Max($maxNounLength - $t.Length + 1, 0)) + '|'
                        } else {
                            (' ' * ($maxNounLength + 1)) + '|'
                        })
                    if ($_.Group.Count -gt 1) {
                        foreach ($i in $_.Group) {
                            '|' + " " * ($maxVerbLength) + '|-' + $i.Noun + ' ' * ([Math]::Max($maxNounLength - $i.Noun.Length, 0)) + '|'
                        }
                    }
                }
            }

            if ($commandSection) {
                $commandLineLength = $commandSection | Measure-Object -Property Length -Maximum | Select-Object -ExpandProperty Maximum
                "Commands"
                '-' * $commandLineLength
                $commandSection -join [Environment]::NewLine
                '-' * $commandLineLength
            }

            if ($module.ExportedAliases.Count) {
                $byResolvedCommand = $module.ExportedAliases.Values | 
                    Group-Object ResolvedCommand                                
            }

        ) -join [Environment]::NewLine        
    </ScriptBlock>
              </ExpressionBinding>
            </CustomItem>
          </CustomEntry>
        </CustomEntries>
      </CustomControl>
    </View>
  </ViewDefinitions>
</Configuration>
